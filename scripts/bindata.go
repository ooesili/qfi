// Code generated by go-bindata.
// sources:
// _assets/bash_comp
// _assets/fish_comp
// _assets/fish_wrapper
// _assets/sh_wrapper
// _assets/zsh_comp
// DO NOT EDIT!

package scripts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __assetsBash_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x94\xd1\x6b\xdb\x30\x10\xc6\xdf\xfd\x57\x7c\x78\x86\xc6\x03\x51\xd2\x3d\x06\xef\xa5\x5b\x61\xb0\xd1\xd2\x3e\x94\x91\x05\xa3\xda\xe7\x44\xa0\x48\xa9\xe4\x76\x8c\xd2\xff\x7d\x27\x47\x71\x1d\x92\x1a\x36\x36\x1a\x08\xce\x9d\xee\xfb\xdd\x77\xa7\x24\xef\x50\xd9\xf5\x46\x53\x4b\x68\xa5\x5b\x52\xeb\x93\xf2\xbe\x51\x65\x0c\x26\x39\x9e\x12\x40\xdb\x4a\x6a\x7c\xb9\xb8\x29\xb2\x93\x1f\xe6\x84\x33\xe7\x97\xdf\xae\xae\x3f\x5f\x7d\xfd\x5e\x4c\x90\x4d\x02\x63\x49\x06\xe2\x16\x69\x36\x61\x3d\x84\xc6\xd9\xc7\xd3\x9a\x1e\x4f\xcd\x83\xd6\x79\x0a\x21\xf8\x68\x9a\xe6\xc8\x93\xe7\x24\x19\xb4\xb5\x9b\x56\x59\x13\xdb\x72\xb0\xdf\x33\x24\x38\x08\x8f\x22\x15\x12\xa2\x0e\x68\xb1\x86\x70\x10\x9e\xa9\x2b\xd2\x1b\x7e\x3c\x92\xf3\x8c\x49\xc7\xad\x05\xcc\x88\x15\x63\xdb\x95\x32\xcb\xad\x15\x63\x0d\x45\x2b\xaf\x13\x5f\x20\x6b\xa9\x0c\x6a\xe5\x37\xb2\xad\x56\xe4\x3a\xc6\xde\x24\xd5\x83\xdb\x47\xe5\x1c\x96\xbc\xe4\x32\x00\xcb\x9f\xd6\xd5\xbe\xbc\xfb\x55\x3a\x6a\x62\xad\x6a\x30\x9f\x23\x0b\x92\xf2\xfc\xf6\xf2\xfa\x13\x04\xdd\x63\x8a\xc5\x62\x86\x76\x45\x86\x4b\x80\xc3\x4d\xc2\xba\xfe\x2e\x43\xc5\x16\x93\x66\x0c\x4d\x51\x14\x10\xef\x99\x80\x01\x82\x6d\xec\x76\x1f\xcb\xba\x34\x69\x4f\xc3\xf3\xc8\x1c\x96\x34\x2a\x19\xd4\x0d\xac\xdc\x49\x4f\x35\xac\xe9\x6f\x37\x9c\x57\x9c\x64\xf5\x53\x37\x50\x98\xe7\x66\x3e\x5d\x3c\xa7\x50\x3b\x1b\xa2\xce\xe3\xa7\xa3\xc3\x2f\x09\x67\xfb\xc3\x8f\xbb\xeb\x1d\x6e\x5f\xb3\xd9\xae\x8d\x1c\x6d\xc3\x3b\x7e\xbd\x4d\xf8\x56\xf4\x39\xd2\xc7\xe5\x1f\x8e\xca\x1b\xa5\xa9\x56\x6e\xdc\x9a\xfe\x7b\x6b\x7f\xb2\x81\xf5\x3f\x6f\xf3\x1f\x76\xe1\xde\xd8\xe4\xc1\x7d\x1f\x75\xe9\x5f\x5c\x1e\x2a\x62\x19\x79\x59\x25\x9d\x9e\xff\x2b\xfa\x1f\x89\xb8\xe8\x14\xe0\x77\xf2\x3b\x00\x00\xff\xff\x88\x46\x52\x6d\x88\x05\x00\x00")

func _assetsBash_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsBash_comp,
		"_assets/bash_comp",
	)
}

func _assetsBash_comp() (*asset, error) {
	bytes, err := _assetsBash_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/bash_comp", size: 1416, mode: os.FileMode(420), modTime: time.Unix(1451530051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\xcd\x8e\xe2\x30\x10\x84\xef\x79\x8a\x92\x76\x25\xc3\xc1\x62\xe1\xbe\x4f\x82\x98\xc8\xb2\x3b\x83\x35\xfe\x09\xb6\xc3\x88\xb7\x1f\x3b\x3f\x28\x39\xc0\x88\x70\x41\x72\x77\xfb\xab\xea\x22\x6e\x3a\x27\x93\xf6\x0e\x75\xdd\xe8\x78\xae\xa5\xb7\xad\xa1\x44\xf5\xa5\xd1\x75\x12\xe1\x93\x52\x05\x44\x4a\x90\x56\x61\x93\xdb\x56\x38\x65\xb4\x23\x70\xdf\xca\x6d\x6e\xfe\x81\x77\xe6\x86\x3c\xdb\x59\x72\x65\x5c\x37\x38\x96\xd9\xce\x25\xfc\xcd\xf7\xb6\xe0\x74\xc1\x1e\xa7\xdc\x03\x02\xa5\x2e\x38\xfc\xcb\x07\x72\xaa\x07\x28\x2a\x9a\x90\xc2\x21\x89\x2f\x82\xed\x4c\xd2\xd9\x07\x06\x07\x71\x62\x16\xd8\xf1\x70\xc2\x7f\x30\xae\xd8\x63\xde\xb4\xc5\x78\x3f\x1b\x94\xf4\xd0\xd7\x61\xe4\xe4\xae\xf4\x2e\x09\xed\x22\x38\xbf\x6b\x71\x03\x6e\xc1\x43\x3f\xb3\x50\x9b\xf4\x86\xdf\xb1\xb1\xaf\xca\xb1\x7a\x9a\x6b\xa3\x43\x4c\xbe\xfd\x35\xd9\x17\x73\x5c\x3a\x98\xa5\x20\xc6\x1c\xaa\x7b\x85\x4b\x64\x23\xe0\x0d\xf8\xb3\xbf\x1e\x5c\x80\x6d\xfa\x49\x83\x8f\x9d\xa2\xeb\xce\x75\xc6\x6c\x19\xb8\x02\x1b\x66\xd8\x42\x2a\x6f\x95\xb7\x8e\x2f\x28\x4d\x61\x14\x09\x76\x26\xd3\xb2\xb2\x5c\xe1\x2b\x1d\x5b\x23\x6e\xe8\x8b\x6b\x89\x57\x0a\x31\x3b\x62\x0b\xe2\x54\x5c\x05\xf5\x60\x82\x0d\x1f\x43\x0f\x15\x4a\x61\x8a\x62\x25\x4f\xcd\x79\xe3\x63\x78\x13\x69\xe6\x48\xa3\x63\x9a\xde\xd2\x6a\xa2\x9d\x13\xad\xbf\xbe\x6d\x31\xcc\x81\x81\x9c\xb0\x6f\x23\xe3\x1c\x19\xcf\xfe\x1b\x31\x89\xd4\xe5\xa5\x7f\x02\x00\x00\xff\xff\x3c\x8b\x4b\x56\xe9\x04\x00\x00")

func _assetsFish_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_comp,
		"_assets/fish_comp",
	)
}

func _assetsFish_comp() (*asset, error) {
	bytes, err := _assetsFish_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_comp", size: 1257, mode: os.FileMode(420), modTime: time.Unix(1451528527, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x28\x4c\xcb\xb4\xe6\x52\x50\x48\xcd\x2b\x03\x31\x15\x54\x12\x8b\xd2\xcb\x40\x02\xc5\xe5\x99\x25\xc9\x19\x0a\x2a\xc5\x25\x89\x25\xa5\xc5\x20\x11\x05\x85\xe4\xc4\xe2\x54\x05\x75\x23\x75\x6b\x85\xe4\x14\x05\x0d\x98\x16\xdd\x1c\x88\xae\x68\xc3\x58\x4d\x64\x75\x5a\x40\x75\x45\xa9\x25\xa5\x45\x79\xc8\xa6\xa4\xe6\xa5\x58\x73\x01\x09\x2e\x40\x00\x00\x00\xff\xff\x09\x92\xc1\xef\x82\x00\x00\x00")

func _assetsFish_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_wrapper,
		"_assets/fish_wrapper",
	)
}

func _assetsFish_wrapper() (*asset, error) {
	bytes, err := _assetsFish_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_wrapper", size: 130, mode: os.FileMode(420), modTime: time.Unix(1451530007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsSh_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\xcb\x41\x0a\x02\x20\x10\x85\xe1\xbd\xa7\x78\xc8\x2c\x1c\xa1\x45\x6d\x25\x3a\x8b\x8c\x13\x08\xa2\xa4\xd5\x26\xba\x7b\x93\xd1\xf2\x7b\x8f\xff\x76\xad\x81\xf1\x72\x80\xf6\x27\x4c\xa0\x68\x68\x43\x72\x83\x8c\xa2\x67\xba\x98\x25\x2f\x05\x7d\x8d\xda\xcd\xc0\x89\x21\x05\x9e\xc2\xbf\x3b\x34\xd0\x91\x7d\x4a\xfb\x8e\x8c\xa9\xf7\xc7\xec\xbf\x6a\xaf\xba\xb2\xb8\xb7\xfb\x04\x00\x00\xff\xff\x5e\x78\xf3\x7a\x73\x00\x00\x00")

func _assetsSh_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsSh_wrapper,
		"_assets/sh_wrapper",
	)
}

func _assetsSh_wrapper() (*asset, error) {
	bytes, err := _assetsSh_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/sh_wrapper", size: 115, mode: os.FileMode(420), modTime: time.Unix(1451530744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsZsh_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x46\x69\xa5\xb4\x45\x56\x45\xb9\x2d\x02\xf1\x0f\x1c\x03\x5a\x0d\xf1\x6c\x13\xc9\xb1\x17\xdb\xd9\x15\x02\xfe\x1d\x4f\xec\xcd\xda\x4b\xa8\x16\xa9\x39\xc5\x33\xef\xbd\x99\x37\x1e\xdf\x74\x66\xdc\x4b\xda\xc1\xf7\xdd\x50\x55\x37\xa0\x06\xe7\x1d\xa0\x52\xe0\xd1\x3e\x93\x07\x8d\x23\xb9\x6a\x1b\xd2\xdb\x18\x71\x77\xf7\xf0\xb3\x82\xf0\x29\xd3\xe1\x09\x97\x05\x04\xa6\x98\x9b\x83\x81\x09\x42\xc1\xd3\xc7\x47\x49\x87\x47\x3d\x05\xe9\x5f\x70\xec\x07\x45\x60\x09\x65\xc2\xbe\x07\x69\x66\x38\x7f\x89\xfe\xe6\xc3\x6d\x26\x2e\x8d\xa6\xf9\x67\x2b\xc9\x75\x76\xf8\x46\x20\x3c\xab\x8b\x04\x87\x26\xfe\x34\x4b\xf9\xdf\xec\xa8\x66\x87\x8a\x3c\xd5\x80\xa0\xe9\x98\x1b\x8b\xbe\x42\x30\x79\x5b\xac\x6d\x9f\x27\xb4\x12\xea\x87\x1a\x9a\x0b\x4e\x13\x65\x83\xea\x88\x5a\xc2\xce\x58\x20\xec\x7a\xc0\xce\x0f\x46\x47\xc5\x6e\x94\xa1\x4b\x2e\x7a\x56\x0c\x0a\xd3\x48\x3a\xf4\x29\x1c\x6c\xe0\xcb\xe2\xb6\x79\xd8\xc0\x26\x1f\x30\x57\x58\x64\x2c\x71\xd1\x6b\x64\x9e\x2e\x65\xf2\xe4\xbb\x53\xf2\x6c\x96\xf3\x59\x21\xbe\xf9\xeb\xca\xac\xd4\xc9\x74\x50\xca\xff\xea\xb6\x6c\xa8\x6c\x78\x17\xb6\xa4\x1c\xc7\x68\x0e\xaf\x34\x8c\x52\x5b\x87\xed\xfa\xa7\x6e\xf3\x36\x10\xd2\xbd\x8f\x38\x68\x90\x83\xdb\xa3\xef\x7a\xb2\x33\x7b\x95\xf8\xf9\xaf\x9e\x84\x6c\xe3\x52\xa4\x75\xfa\xba\x59\x6e\xfe\xbc\x30\x45\xa3\x02\xdb\x30\xce\x75\x78\x48\x94\xd8\xb1\xe5\xe1\xac\x83\x39\x53\xa2\x6d\x1b\x37\x6b\x1d\x1f\x73\x25\x43\xb5\xbc\x22\xa7\xc7\x75\x41\xe0\x54\x09\x77\xad\xeb\xcd\x11\x9c\x47\x3f\xe5\x68\x9e\x74\x89\x14\x3d\xa9\x7d\xcb\x33\x55\xf8\x03\xf8\xf0\x32\xfc\x40\xd6\x85\xa7\xb6\x30\xd2\xf9\x25\xd2\x9d\xb8\x5f\x79\x64\xf3\xe5\x41\x7d\xfb\xa9\xae\xfe\x04\x00\x00\xff\xff\xe7\x02\x5c\x0d\x08\x05\x00\x00")

func _assetsZsh_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsZsh_comp,
		"_assets/zsh_comp",
	)
}

func _assetsZsh_comp() (*asset, error) {
	bytes, err := _assetsZsh_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/zsh_comp", size: 1288, mode: os.FileMode(420), modTime: time.Unix(1451528391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_assets/bash_comp": _assetsBash_comp,
	"_assets/fish_comp": _assetsFish_comp,
	"_assets/fish_wrapper": _assetsFish_wrapper,
	"_assets/sh_wrapper": _assetsSh_wrapper,
	"_assets/zsh_comp": _assetsZsh_comp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_assets": &bintree{nil, map[string]*bintree{
		"bash_comp": &bintree{_assetsBash_comp, map[string]*bintree{}},
		"fish_comp": &bintree{_assetsFish_comp, map[string]*bintree{}},
		"fish_wrapper": &bintree{_assetsFish_wrapper, map[string]*bintree{}},
		"sh_wrapper": &bintree{_assetsSh_wrapper, map[string]*bintree{}},
		"zsh_comp": &bintree{_assetsZsh_comp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


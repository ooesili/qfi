// Code generated by go-bindata.
// sources:
// _assets/.zsh_comp.swp
// _assets/bash_comp
// _assets/fish_comp
// _assets/fish_wrapper
// _assets/sh_wrapper
// _assets/zsh_comp
// DO NOT EDIT!

package scripts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __assetsZsh_compSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xcb\x8b\x1c\x55\x14\xc6\x6f\x22\x42\xa2\x46\x45\x45\xc9\xe0\xe2\xa4\x27\x50\x3d\x23\x35\x95\x99\x11\xd4\x96\x11\xb7\x59\x04\x17\x92\xa0\xb4\xa1\xb9\x5d\x75\xbb\xab\xb0\x5e\x53\xb7\x7a\x86\x19\x35\x11\xdc\x28\xb8\x73\x23\xfe\x01\xae\x54\x70\xa9\x2b\x51\x04\xb7\x6e\x82\x46\xdc\xb8\x70\xa5\x88\x8f\xa5\xa2\xdf\xad\xba\xd5\x53\xd3\xe9\x4c\xab\x0b\x1f\x70\x3e\xf8\x75\x75\xdd\x73\xce\x57\xf7\x59\x24\x4c\x0f\xcf\x5d\x3a\x7f\x81\x1e\x59\x7b\x58\x40\x77\x0b\xf1\xca\x8f\xaf\x5e\x3a\x7f\x7c\x49\x9c\xd9\x14\x22\xcb\x94\x8e\xe2\x48\x2c\x92\x2c\xfc\x70\x98\x65\xcf\x2f\xca\xbb\x62\x0d\xbd\x71\x16\xcb\x74\xec\xe9\xc2\xf7\xc6\x51\x19\x4e\x86\x6b\x7e\x96\x78\x4d\x74\x7b\x14\x79\xda\x2f\xa2\xbc\xd4\xde\x40\x6a\xad\x70\xdd\xd7\xe1\x00\x39\xf9\xc2\xbe\xb0\x58\xac\x39\x9a\x94\x23\xf7\xd1\x53\x62\x73\x63\xfd\x9c\xb9\x5d\xee\x9c\xa1\x7b\xef\xb9\xf8\x6f\xf7\x8a\xc5\x62\xb1\x58\x2c\x16\x8b\xc5\x62\xfd\x83\x2a\xf3\x63\xe2\x2a\xae\xc7\xed\xfd\x53\xf6\x7a\x6c\xe6\xca\x62\xb1\x58\x2c\x16\x8b\xc5\x62\xb1\x58\x2c\x16\xeb\xff\x2b\x19\x08\xf1\xd6\x09\x21\x7e\x3a\x29\xaa\xbf\xff\x37\xff\xff\xff\xf9\x2e\xb4\x81\x2f\xc1\x67\xe0\x03\xf0\x36\xd8\x03\x01\xb8\x0c\xd6\x81\x07\xd6\xc0\x69\x70\x2b\xf8\xf6\x4e\x21\xbe\x06\x5f\x81\xeb\xe0\x23\xf0\x0e\x78\x13\x5c\x05\x2f\x81\x08\x5c\x04\x3d\xf0\x20\x58\x02\x27\xc0\x2f\xa7\x84\xf8\x02\x5c\x03\x9f\x82\xf7\xc1\x1b\xe0\x65\x70\x05\xc4\xe0\x19\xb0\x05\x56\x41\x17\x38\xe0\x3e\x20\xc0\x37\x77\xa0\x0e\x7c\x02\x3e\x06\xef\x81\xd7\xc1\x36\xc8\x40\x0a\x9e\x05\x8f\x81\xd3\xe0\x01\x70\x3f\x38\x01\x7e\xb8\x5d\x88\xef\xc1\x77\xe0\x3a\xf8\x1c\x7c\x08\x5e\x03\x03\xb0\x09\x6e\x01\xd7\x6e\x13\xe2\x5d\xb0\x0f\x2e\x80\x25\xf0\x3b\xe6\xee\x37\xf0\xeb\x49\x3b\x8f\x2c\x16\x8b\xc5\x62\xb1\x58\xff\x19\x0d\xb6\x47\x91\x81\x3a\x67\x9f\xec\xe0\x1f\x63\x82\x2a\x39\x5d\x77\xa5\x47\xbd\x2a\x5a\xca\x62\xac\x4a\xed\x34\x21\xd7\xdd\x51\x85\x8e\xb2\xb4\x1f\x44\x3a\x8f\xe5\x1e\xd9\xfb\xcb\xbd\xd5\xa6\x26\xcd\x52\xe5\xd0\x73\x07\x25\xa1\x8a\xf3\x69\xbe\xb9\x39\x2a\x59\x23\x21\xee\xe7\x45\x94\x96\x54\xff\xee\xb3\x95\xed\x27\xc1\xa0\x4a\x68\x97\xe8\xbe\x0e\xb3\x5d\xd2\x93\x24\x91\xc5\xde\x11\xde\x71\x3f\x8e\x74\x49\x76\x4c\x33\xb6\x26\xd4\x4e\x2e\xfa\x85\x4a\x65\xa2\x6c\xfa\x4c\x76\x1d\x6b\xe7\x27\xfd\x24\xdb\xb9\x49\xb6\x89\xb4\x73\x65\x5f\x06\xc1\xfc\x54\x04\xda\x99\x41\x3f\x50\xb1\x2a\xd5\x4d\x3a\x5d\x07\xeb\x82\x01\x32\x26\x89\x4a\x4b\x4d\xee\xd3\xe4\x6a\xea\xa1\xd9\x64\x76\x57\xe8\x05\xb1\x4c\x89\x8c\x52\x32\xab\x20\x4b\x3f\x54\x45\xbd\xde\xed\x22\x53\xe1\xac\xc3\xde\x11\xd3\xe9\xab\x6a\xeb\xcc\x40\x99\xe5\x18\x2a\x72\xea\x65\xa1\x72\x2f\xc7\xa3\xcd\xa7\x46\x3c\xce\x7c\x19\x93\x2b\xeb\x86\xad\xae\xf9\x7d\x2e\xed\x16\x32\xcf\x55\xb1\x52\x1b\xd6\x75\x03\x93\x30\xdf\xb7\x5e\xd9\xea\x72\xc8\xb2\x6e\xd9\xea\x0e\xa5\x0e\x69\x14\xe1\x63\x5f\x87\x8d\xa9\x89\x0d\xcc\x6a\x1c\x78\x56\x73\xb7\xd9\x4c\x54\xeb\xb1\xd3\x7d\xbc\x31\x0d\x4e\xcb\x6f\x9c\xc5\x83\x29\x3c\xd8\x78\xf3\x1e\x32\x8a\x62\xa5\x6f\xb4\x6e\xce\xce\x22\x5f\xb3\x3b\x2a\xdb\x3f\xe5\x9a\xaa\x5d\xeb\xbc\xd0\x18\x7b\xe9\xb0\xef\x46\xef\xaf\xf6\xcd\x9c\x8a\x39\x7d\x9b\xd7\x91\xbf\x37\xf8\xfa\x20\x1d\x7e\xc4\xea\x9c\xb7\xcf\x11\x16\xf5\x21\xb0\xbb\x1c\xdb\x2e\x91\x69\x40\xa3\xac\x20\x25\xfd\x90\xa4\x5f\xe2\xf5\x64\xf7\x5a\x35\xa7\xe6\xcb\x78\x22\x8b\x80\x3a\xab\x1d\x72\x30\x0e\x7b\xba\xa8\xda\x06\x62\x66\x74\xd6\xb8\x95\x06\x6b\x63\x34\xbb\x7f\xdd\x92\x50\xe9\xda\x4e\x93\xd3\x4c\x8e\x6d\x40\x6e\x80\x13\x55\x0d\xd2\x36\x3d\xb4\x75\xb6\xfe\x86\x46\xf3\x1e\x76\x63\xda\x78\xc2\x0b\xd4\x8e\x97\x4e\xe2\x98\x5e\xa4\xdd\x10\xcf\xa1\x42\xc9\xe6\x6d\xf1\x38\x3c\x0e\x1d\xb6\xa9\x77\xdd\x64\xed\xda\xb3\x67\xfb\x6f\x56\x52\x93\x8c\xe3\xf6\x60\xb5\x10\xcb\xe6\xa0\x06\x6a\x64\x3a\x20\xfe\x08\x00\x00\xff\xff\x83\x23\x7a\xe0\x00\x30\x00\x00")

func _assetsZsh_compSwpBytes() ([]byte, error) {
	return bindataRead(
		__assetsZsh_compSwp,
		"_assets/.zsh_comp.swp",
	)
}

func _assetsZsh_compSwp() (*asset, error) {
	bytes, err := _assetsZsh_compSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/.zsh_comp.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1451815318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsBash_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x71\x78\x86\xc6\x03\x51\x92\x3d\x06\xef\xa5\x5b\x61\xb0\xd1\xd2\x3e\x94\x91\x05\xa1\xda\xe7\x58\xa0\x48\xae\xe4\xb6\x6c\x4d\xff\xf7\x9d\x6c\xc7\xb1\x49\xe2\x41\x17\x68\x20\x96\x74\x3f\xbe\xef\xbb\x13\xba\x0f\x90\x9a\x75\xa9\xb0\x42\xa8\x84\x5d\x61\xe5\x02\xfe\x90\x4b\xde\x1e\x26\x31\xbc\x04\x00\xca\xa4\x42\xc1\xb7\xcb\xdb\x24\x3a\xfb\xa5\xcf\xc8\x72\x71\xf5\xe3\xfa\xe6\xeb\xf5\xf7\x9f\xc9\x04\xa2\x89\xc7\x58\xa1\x06\x76\x07\x61\x34\xa1\x7c\x60\x0a\x66\x9f\xcf\x33\x7c\x3a\xd7\x8f\x4a\xc5\x21\x30\x46\xae\x69\x18\x43\x1c\xbc\x06\x41\x8f\xd6\x94\x95\x34\xba\xa5\xa5\xc3\x90\xd3\x1b\xe8\xe0\x97\x24\x64\x02\x58\xe6\xa1\xd9\x1a\x98\x05\xe6\x08\xd5\x15\xa8\xc8\xc0\x68\x29\x69\x79\x42\xeb\x08\x2e\x1c\x97\xe8\xe1\x46\x24\x69\x53\x15\x52\xaf\x1a\x49\xda\x68\x6c\x25\x1d\x47\xdc\x81\xac\x85\xd4\x90\x49\x57\x8a\x2a\x2d\xd0\xd6\x18\x83\x8a\xd2\x47\x3b\x84\x8a\xe9\xc8\xa9\xd9\xdc\x03\xf2\x67\x63\x33\xc7\xef\x7f\x73\x8b\x79\x1b\x2b\x73\x58\x2c\x20\xf2\x29\xfc\xe2\xee\xea\xe6\x0b\x30\x7c\x80\x29\x2c\x97\x73\xa8\x0a\xd4\x14\x02\xb0\xdf\x51\x30\xb6\xbb\x53\x1f\xd1\xc0\x84\x11\x81\x86\x90\x24\xc0\x3e\x12\x02\xf4\x20\x48\xc6\xf6\x0e\xda\xb0\xda\x8c\xca\x61\xdf\xdf\x62\xf6\x43\x72\x19\xf4\xe2\x7a\x52\xee\x85\xc3\x0c\x8c\xee\x6e\xd9\xfb\x53\x32\x52\xf6\x4b\x5d\x90\xaf\xe7\x76\x31\x5d\xbe\x86\x20\xb7\x32\x58\x16\xb7\xbb\x83\xc5\xaf\x10\x66\xc3\xe2\xc7\xd5\x75\x0a\x9b\xdf\x7c\xbe\xa5\x11\xa3\x34\xd4\xe3\x19\x6c\x36\x7b\xc6\x4f\x07\xb9\x73\xa9\x30\x93\x76\x9c\x50\xfd\x9b\xf0\x14\x75\xad\x4f\x4e\x83\xea\x30\xd0\x7f\xf4\xc2\xbe\xb3\xc8\xed\xdb\x1e\x57\xe9\x36\xcd\x68\xd9\x74\xa3\x65\x27\x7b\x1f\x62\x97\xd7\xcc\xa5\x37\x95\x78\x7c\xca\xd0\x6b\x2a\x48\x26\x7d\xfe\xb8\x62\x30\xbf\xde\xd4\x82\xe3\x44\x7e\x0f\xcf\x56\x94\x25\xda\x83\x3c\xfb\xbd\x42\x27\xd2\xa0\x76\xd0\x18\xec\xde\x3f\xbb\xac\xbb\x04\xf4\x0f\xfe\x06\x00\x00\xff\xff\xcf\xc1\x9a\x90\x6b\x06\x00\x00")

func _assetsBash_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsBash_comp,
		"_assets/bash_comp",
	)
}

func _assetsBash_comp() (*asset, error) {
	bytes, err := _assetsBash_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/bash_comp", size: 1643, mode: os.FileMode(420), modTime: time.Unix(1451815089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\x4d\xae\xdb\x20\x1c\xc4\xf7\x39\xc5\x2c\x2a\xf1\xb2\x40\xaf\x49\x97\x51\x4f\x12\xa5\x16\x35\xb8\x46\xc2\x40\x00\x27\x4a\x4f\x5f\xc0\x1f\xb1\x55\x29\x95\xed\x26\x9b\xc8\xcc\xf0\xd3\x30\xfc\xa9\x5a\x5d\x06\x69\x34\x8a\xa2\x92\xbe\x2e\x4a\xd3\x58\x25\x82\x28\xae\x95\x2c\x02\x73\xbf\x44\x38\xed\x00\x2f\x02\xca\x86\xe3\x23\xea\x0d\xd3\x5c\x49\x2d\x40\x8d\x2d\xf7\x49\x95\x15\xce\x49\x6a\x75\xc0\x97\x68\xdb\x83\x8a\x2b\x0e\xb8\x24\x11\x70\x22\xb4\x4e\xe3\x6b\xfa\x12\x9a\x8f\x3b\x92\xf5\x7c\xbc\xe0\x3b\x08\xe5\xe4\x5f\xee\xbf\xf8\xc7\x61\x47\x94\x4b\xa3\x03\x93\xda\x83\xd2\x11\x4b\x15\x68\x03\xea\x3a\xd3\x1c\x3c\xa2\xfb\xbf\x5e\x3b\x9c\x76\x79\x61\xf7\xb2\x96\x4a\x3a\x1f\x8c\x7d\x4b\x31\x8b\x82\xf8\xd2\x49\x1b\x8a\xf0\xb0\x62\x6d\x96\x6f\x93\x12\xe7\x37\x42\x7d\x2d\x94\x1a\xaf\xe5\x3f\xf6\x97\xc1\x85\x66\xcd\xea\xd4\xc7\xf7\xa4\x1e\x52\x82\x96\x88\x41\x41\x2b\xd0\x57\x2f\x03\x94\x81\x7c\x64\xa7\xc2\x8f\x4f\x2e\x6e\x9f\xba\x55\x6a\x4f\x40\x39\x48\xe7\x21\x8b\xb8\xcf\x6a\x90\xe1\x3f\x99\xaf\x91\x6c\xf8\xed\xeb\x0e\xdb\x1d\xf0\xb4\x04\xfa\x1c\x93\x0c\xbd\x3b\x66\xad\x70\x48\xa6\x9e\x99\x1d\x48\x8e\x65\x79\x87\xa7\x90\x0a\x20\x31\x58\xe4\xc5\x5f\x42\x72\xe9\xad\x62\x0f\xe4\xc5\x25\x69\x67\xc8\x9b\x70\x3e\x8e\x11\x99\x21\x87\xc5\xd5\xd4\x7e\x46\xba\xa0\xd6\xc9\x38\x5b\x5d\x03\x7e\x25\xd3\x80\x30\xd2\xcd\x5b\x66\x32\xce\x31\x5e\xff\x4a\x20\x9f\x02\xb9\xc8\x84\xad\x4c\x35\x65\x2a\xe9\x43\x4f\xdc\x70\xee\x66\x8a\x6c\xcc\x6d\x7b\x48\x37\x25\x3a\x91\x1f\xc3\x56\xa6\x9f\x32\x7d\x6d\xee\xf0\x81\x85\x36\x9d\xfb\x4f\x00\x00\x00\xff\xff\x7b\xf0\xde\xf3\x02\x07\x00\x00")

func _assetsFish_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_comp,
		"_assets/fish_comp",
	)
}

func _assetsFish_comp() (*asset, error) {
	bytes, err := _assetsFish_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_comp", size: 1794, mode: os.FileMode(420), modTime: time.Unix(1451815169, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x28\x4c\xcb\xb4\xe6\x52\x50\x48\xcd\x2b\x03\x31\x15\x54\x12\x8b\xd2\xcb\x40\x02\xc5\xe5\x99\x25\xc9\x19\x0a\x2a\xc5\x25\x89\x25\xa5\xc5\x20\x11\x05\x85\xe4\xc4\xe2\x54\x05\x75\x23\x75\x6b\x85\xe4\x14\x05\x0d\x98\x16\xdd\x1c\x88\xae\x68\xc3\x58\x4d\x64\x75\x5a\x40\x75\x45\xa9\x25\xa5\x45\x79\xc8\xa6\xa4\xe6\xa5\x58\x73\x01\x09\x2e\x40\x00\x00\x00\xff\xff\x09\x92\xc1\xef\x82\x00\x00\x00")

func _assetsFish_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_wrapper,
		"_assets/fish_wrapper",
	)
}

func _assetsFish_wrapper() (*asset, error) {
	bytes, err := _assetsFish_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_wrapper", size: 130, mode: os.FileMode(420), modTime: time.Unix(1451615710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsSh_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\xcb\x41\x0a\x02\x20\x10\x85\xe1\xbd\xa7\x78\xc8\x2c\x1c\xa1\x45\x6d\x25\x3a\x8b\x8c\x13\x08\xa2\xa4\xd5\x26\xba\x7b\x93\xd1\xf2\x7b\x8f\xff\x76\xad\x81\xf1\x72\x80\xf6\x27\x4c\xa0\x68\x68\x43\x72\x83\x8c\xa2\x67\xba\x98\x25\x2f\x05\x7d\x8d\xda\xcd\xc0\x89\x21\x05\x9e\xc2\xbf\x3b\x34\xd0\x91\x7d\x4a\xfb\x8e\x8c\xa9\xf7\xc7\xec\xbf\x6a\xaf\xba\xb2\xb8\xb7\xfb\x04\x00\x00\xff\xff\x5e\x78\xf3\x7a\x73\x00\x00\x00")

func _assetsSh_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsSh_wrapper,
		"_assets/sh_wrapper",
	)
}

func _assetsSh_wrapper() (*asset, error) {
	bytes, err := _assetsSh_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/sh_wrapper", size: 115, mode: os.FileMode(420), modTime: time.Unix(1451615710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsZsh_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x94\xdb\x6e\xdb\x3c\x0c\xc7\xef\xfd\x14\x44\x5a\x40\x49\x3f\x08\xc5\xd7\xdd\x65\xe8\xb0\x77\xd8\xa5\x37\x18\xaa\xc5\xd4\x06\x64\xd9\x93\x94\x04\xd9\xe1\xdd\x47\x1d\x6c\x2b\x86\xb3\x16\xd8\x4d\x1b\x8b\x7f\xfe\x78\x10\xa9\xbb\xba\xef\x06\x89\x07\xf8\x7e\x68\x8b\xe2\x0e\x54\x6b\x9d\x05\xa1\x14\x38\x61\x5e\xd1\x81\x16\x1d\xda\xa2\x22\x73\x15\x4f\xec\x76\x07\x3f\x0b\x00\xd5\xd7\x62\x54\x4d\x9f\x5c\xa4\x13\x4b\x47\xe4\x03\x5c\xc1\xd3\xa7\x47\x89\xa7\x47\x7d\x24\xe8\x2f\x38\x37\xad\x42\x30\x28\x64\x52\x7e\x04\xd9\x93\x18\x46\xc7\xff\x9e\xef\x27\xa8\xec\x35\xd2\xbf\x4a\xa2\xad\x4d\xfb\x82\xc0\x9d\xa7\xf2\x24\x05\x16\x7f\xb0\x29\xe8\x6f\x5f\x83\xc6\xf3\x98\x7d\x6f\xe0\x40\xf1\x62\xfe\x74\x9e\x6a\x48\x25\x54\xaf\x47\x61\x24\x6c\x1e\x36\xc0\x32\x27\x5f\x32\xf3\x66\xef\x9a\x98\xd4\xa6\x4e\x68\x09\x07\x22\xa2\xa8\x1b\x10\xb5\x6b\x7b\x1d\xc1\x75\x27\x29\x45\x85\x0e\x47\x30\x81\x8e\x1d\x6a\x4a\x91\x5b\xd8\xc3\xd7\x50\x20\x00\x7b\xd8\xc3\x3e\xef\x25\x23\xfa\x84\x30\xe8\x23\xbf\x85\x78\x5a\x22\x66\xd3\x87\xd1\x34\x57\xea\xad\x59\x08\x7f\xbd\x6f\x07\x58\x89\x90\x31\x84\x94\xef\xce\xf1\x3a\x91\x3c\xcd\xd0\xdb\xab\xf2\xbb\xfe\xf4\xcf\xc5\x4f\xd4\x19\x6b\x1b\x54\xea\xdd\xdc\xa0\xae\xc2\x04\xac\xf4\xd5\x4f\xe1\xe0\x2a\x77\x19\x70\x0e\x32\xbb\x5c\x6d\x06\xad\x42\xb0\xd8\xe7\xed\x8b\xb0\x0d\xcd\x21\xfd\xf9\x61\x9b\xdd\xd5\x40\xb3\xa0\x61\x49\x3a\x33\xe7\x40\x4b\xa8\x3f\x23\xa6\xdf\x5b\x38\x1b\x31\x0c\x68\x96\xc8\xe0\x1c\x84\x2c\xca\x27\xae\xa6\x85\xba\xd1\x0b\xf6\x3f\x55\xc9\xe2\xb4\x77\xa2\xd5\x20\x5b\x3b\x08\x57\x37\x68\x82\xef\x8a\xdb\x97\x45\x17\xb9\x2c\xe3\x1a\x8c\xfb\xf8\x6d\x3f\x0d\xfc\xbc\x23\x59\x63\xb9\x28\x69\x9a\x92\x7a\x21\x26\x43\xae\xec\x4a\x3f\x1f\xeb\x52\x6f\xc9\xb5\xa6\x8c\xab\xb4\xae\x8e\xb6\x5c\xaf\x4a\xbf\x17\x37\x92\xf6\xa6\x5c\x6c\x4b\xdb\xf4\x67\xb0\x47\x7a\x10\xcc\x25\x13\xfb\xde\xe6\x42\x1e\xee\xb4\x1c\x4c\xab\x1d\xc4\x3b\x59\xa0\xd3\xdd\x67\x2e\x74\x30\x94\xbe\xf1\x4a\x5c\xc0\x7f\xfc\x8d\x7f\x42\x63\xe9\x0d\x9a\xf4\xe9\xfb\xb6\xcb\x96\xef\x56\xde\x9f\x70\xbb\xb0\xb9\xff\xbc\x29\xfe\x04\x00\x00\xff\xff\x3e\x0e\x38\xd4\x0e\x06\x00\x00")

func _assetsZsh_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsZsh_comp,
		"_assets/zsh_comp",
	)
}

func _assetsZsh_comp() (*asset, error) {
	bytes, err := _assetsZsh_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/zsh_comp", size: 1550, mode: os.FileMode(420), modTime: time.Unix(1451815299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_assets/.zsh_comp.swp": _assetsZsh_compSwp,
	"_assets/bash_comp": _assetsBash_comp,
	"_assets/fish_comp": _assetsFish_comp,
	"_assets/fish_wrapper": _assetsFish_wrapper,
	"_assets/sh_wrapper": _assetsSh_wrapper,
	"_assets/zsh_comp": _assetsZsh_comp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_assets": &bintree{nil, map[string]*bintree{
		".zsh_comp.swp": &bintree{_assetsZsh_compSwp, map[string]*bintree{}},
		"bash_comp": &bintree{_assetsBash_comp, map[string]*bintree{}},
		"fish_comp": &bintree{_assetsFish_comp, map[string]*bintree{}},
		"fish_wrapper": &bintree{_assetsFish_wrapper, map[string]*bintree{}},
		"sh_wrapper": &bintree{_assetsSh_wrapper, map[string]*bintree{}},
		"zsh_comp": &bintree{_assetsZsh_comp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// _assets/.fish_comp.swp
// _assets/bash_comp
// _assets/fish_comp
// _assets/fish_wrapper
// _assets/sh_wrapper
// _assets/zsh_comp
// DO NOT EDIT!

package scripts

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __assetsFish_compSwp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9a\xbb\x6b\x14\x5b\x1c\xc7\x4f\x02\x81\x9b\xd7\xbd\x97\x7b\xb9\x70\xb9\xb7\xf9\xf9\x62\x93\x62\x32\x79\x88\x06\x16\xc1\x46\x41\xc1\xd2\x58\x84\xb8\x9e\x9d\xc7\xee\xe0\xbc\x72\xce\xd9\x84\x58\xa8\xd8\x28\xd8\xd9\x89\x16\x29\x04\xd1\xc6\x46\x0b\x11\x9b\xb4\xfe\x09\xfe\x05\x51\xc1\x42\x0b\x25\x8d\xdf\x79\x64\x37\xf8\x60\xd9\xac\x24\x08\xbf\x0f\x7c\x38\x33\x73\x7e\xfb\xcd\xef\x9c\x99\x2d\xc2\x4e\x7d\x7a\xe1\xcc\x39\x3a\x3e\x75\x54\x80\x3f\x85\x58\xdf\xbc\xb5\x70\x63\xf0\x3f\x61\x86\x85\x48\x12\x4f\x07\x61\x20\xba\x21\x95\xd3\xac\x27\xc9\xe5\x6e\x75\x57\xcb\x40\xbb\x91\x84\x32\x6e\xd8\x5a\x39\x76\x23\x30\xcd\x56\x7d\xca\x49\x22\x7b\x7b\x76\xd9\x0f\x6c\xed\xa8\x20\x35\xda\xae\x49\xad\x3d\x8c\x7e\xa0\x9b\x35\x14\xa5\x5d\x9b\x61\x18\xe6\x5b\x5a\xc6\xb7\xe6\xc7\xc5\xdc\xec\xcc\x74\x76\x7a\xe8\xe0\x01\xfa\xfb\xaf\xf3\xfb\xdd\x15\xc3\x30\x0c\xc3\x30\x0c\xc3\x30\x7b\x88\x49\x07\xc4\x35\x8c\x83\xe5\xf9\x7c\x39\x0e\x7c\x35\x32\x0c\xc3\x30\x0c\xc3\x30\x0c\xc3\x30\x0c\xf3\xeb\x22\x5d\x21\x9e\xff\x26\xc4\xb3\x61\x91\xff\xfe\xbf\xfd\xff\xff\xeb\x3f\x84\x78\x09\xd7\xe1\x1d\x78\x1b\x2a\xe8\xc2\x25\x78\x12\xfe\x0f\x47\xe1\x20\xdc\xfa\x5d\x88\xf7\xf0\x0d\xdc\x84\x1b\xf0\x01\xbc\x09\xd7\xa0\x82\x3e\x94\xf0\x12\x3c\x06\xff\x85\x5b\xe3\xf8\x5b\xf0\x15\xdc\x80\x2f\xe0\x13\xf8\x18\x3e\x82\xd7\x61\x1d\x9e\x82\x47\xe0\x3f\x70\x0c\x0e\xc1\xcf\x63\x42\x7c\x84\x1f\xe0\x7d\x78\x0f\x9e\x86\xef\x46\x85\x78\x0b\xef\xc2\xb3\xf0\xd3\x88\x10\x0f\xe1\x05\x38\x34\x52\xac\xf5\xe9\xf0\x7e\xee\x3a\xc3\x30\x0c\xc3\x30\x4c\x8f\x64\x2f\x42\x86\x9e\xf1\xc8\x72\x68\xd9\x0f\xc8\xf2\xc9\x8a\xa9\x56\x6b\xbf\x25\x99\x4d\xd6\x30\x83\x2b\x4a\x9b\x24\x35\x64\x25\x54\xd1\x15\xca\xb0\x5c\x1c\x36\x93\x55\xd2\x46\x9a\x96\xae\x54\x77\x9b\xa7\x3a\x79\xca\x8b\x65\xe4\x91\x91\xaa\xe1\x99\xdd\x27\x46\x9d\xc4\x28\x59\xe9\x3f\x2f\xec\xe4\x85\x81\x36\x65\x5e\x1f\x4b\x76\x3b\x81\xae\x97\x7f\xbe\xdf\x16\x65\x27\x51\xba\x6e\x7f\x71\x61\x76\x63\xbd\x10\xab\xce\xe2\x52\x15\xc4\x86\xca\x37\x69\x91\xd8\x43\x64\xf1\xa1\x9a\x59\x4b\x51\x2c\xa9\xb2\xaa\x64\x9a\x7a\x8a\xb2\xa2\x22\xbc\xa8\xa0\xac\xa2\xa7\x66\xf3\xfe\x6a\xf9\xc3\x92\x27\xd7\xa5\x6e\x52\x56\x46\x57\x74\xb3\x8c\xce\x97\xd0\x53\xbf\xc5\xae\xe5\x81\x13\x79\x65\x48\x17\x6d\xd7\x5b\xb1\xe3\x56\x18\x4e\x16\xb1\xed\x9d\x15\x5e\xec\x56\x05\x91\xf2\x4c\x4b\xc5\x34\x93\x1d\x97\x97\x76\x1c\xb4\xe7\xa7\x8b\xf3\xc0\xa7\x45\x3a\xec\x44\xee\xe2\xec\x12\x9d\xa0\x8a\x65\x95\x5b\xbd\x94\xcd\xe7\xb3\x13\x4e\xd2\xc2\x8e\x67\x45\x93\x64\x79\xcb\x34\x5b\x4c\x6a\xb4\x86\x6b\xd9\x7c\x14\xc9\xd8\x0d\x83\x18\x6b\x4a\x52\x67\xb2\x2a\xfc\x56\xec\x98\x20\xe9\xb6\x59\x7b\xd9\xf5\x5c\xbf\x5d\x77\x1e\x9e\x2e\x6d\xef\xec\xf5\xfb\xbd\xcc\xf4\xd9\xcb\xf6\x77\xa3\x8f\xfd\x73\x92\xd8\xc8\x20\xd6\x64\x59\xed\x9d\xc4\xf3\x65\x45\x64\xa9\xae\xb7\xfe\xc7\x4b\xdd\x79\x53\xdc\x4a\xb7\xea\x9f\xbe\x31\xc5\xb7\xa1\x2a\xbe\x04\x00\x00\xff\xff\x14\xbb\xab\x5b\x00\x30\x00\x00")

func _assetsFish_compSwpBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_compSwp,
		"_assets/.fish_comp.swp",
	)
}

func _assetsFish_compSwp() (*asset, error) {
	bytes, err := _assetsFish_compSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/.fish_comp.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1451813711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsBash_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x54\xdd\x6a\xdb\x30\x14\xbe\xf7\x53\x7c\x78\x86\xc6\x03\x51\x9a\x5d\x06\xef\xa6\x5b\x61\xb0\xd1\xd2\x5e\x94\x91\x05\xe3\xda\xc7\xb1\x40\x91\x5c\xc9\x5d\xd9\xda\xbe\xfb\x8e\x1c\x27\xb1\x49\xe2\x41\x57\x58\x20\x89\x75\x7e\xbe\x9f\x63\x74\xde\x21\x37\xab\x5a\x51\x43\x68\x32\xbb\xa4\xc6\x05\xe9\x7d\x29\xd3\xee\x30\x89\xf1\x14\x00\xca\xe4\x99\xc2\x97\x8b\x9b\x24\x3a\xf9\xa1\x4f\x38\x72\x7e\xf9\xed\xea\xfa\xf3\xd5\xd7\xef\xc9\x04\xd1\xc4\x63\x2c\x49\x43\xdc\x22\x8c\x26\xdc\x0f\xa1\x30\xfd\x78\x5a\xd0\xcf\x53\xfd\xa0\x54\x1c\x42\x08\x4e\x9d\x85\x31\xe2\xe0\x25\x08\x7a\xb4\xa6\x6e\xa4\xd1\x1d\x2d\x1f\x86\x9c\x3e\xc0\x07\xff\x97\x84\x22\x83\x28\x3c\xb4\x58\x41\x58\x08\xc7\xa8\xae\x22\xa5\xc2\x71\x45\xbe\x7b\x44\x81\x36\x4d\x25\xf5\x72\xad\x40\x1b\x4d\x9d\x82\xe3\x88\x3b\x90\x55\x26\x35\x0a\xe9\xea\xac\xc9\x2b\xb2\x2d\xc6\xc0\x40\xfe\x60\x87\x50\x31\x1f\x53\x9e\x6d\xea\x01\xd3\x47\x63\x0b\x97\xde\xfd\x4a\x2d\x95\x5d\xad\x2c\x31\x9f\x23\xf2\x2d\xe9\xf9\xed\xe5\xf5\x27\x08\xba\xc7\x19\x16\x8b\x19\x9a\x8a\x34\x97\x00\xfb\x03\x84\xb1\xdb\x57\xe8\x2b\xd6\x30\x61\xc4\xa0\x21\x92\x04\xe2\x3d\x23\xa0\x07\xc1\x32\x36\x23\xef\xca\xda\x30\x29\x47\xfd\x7c\x87\xd9\x2f\x29\x65\xd0\xab\xeb\x49\xb9\xcb\x1c\x15\x30\x7a\xfb\x52\x7d\x3e\xe7\x20\x77\x3f\xb5\x86\xbc\x9f\x9b\xf9\xd9\xe2\x25\x84\xdc\xc8\x10\x45\xdc\x3d\x1d\x34\xbf\x24\x4c\x87\xe6\xc7\xd5\x6d\x15\xae\x3f\xb3\xd9\x86\x26\x1b\xa5\xe1\x19\x4f\xf1\xfc\xbc\x17\xfc\x70\x90\xbb\x94\x8a\x0a\x69\xc7\x09\xd5\xdf\x09\xdf\xc2\xd7\xea\xcd\x69\x48\x1d\x06\xfa\x87\x59\xd8\xff\x2c\x72\x73\xb7\xc7\x55\xba\x9d\xca\xfd\x8e\x5d\xd9\x7a\xeb\xbc\xca\xd1\xf1\xa5\xc2\x97\xa7\x62\x55\xfc\xf3\xdb\x55\x83\x75\xf5\x2a\xc7\xc7\x89\xfc\x33\x1e\x6d\x56\xd7\x64\x0f\xf2\xec\x8f\x86\x5c\x96\x07\x6d\x82\xb7\xde\xf6\xba\x8b\x8b\x76\x4a\xe0\x6f\xf0\x27\x00\x00\xff\xff\xb5\x75\xb9\xd3\x49\x06\x00\x00")

func _assetsBash_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsBash_comp,
		"_assets/bash_comp",
	)
}

func _assetsBash_comp() (*asset, error) {
	bytes, err := _assetsBash_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/bash_comp", size: 1609, mode: os.FileMode(420), modTime: time.Unix(1451813645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xd1\x6e\xc2\x20\x18\x85\xef\x7d\x8a\x73\xb1\x04\xbd\x20\x4e\x77\x69\xf6\x24\xc6\x35\xac\xd0\x95\x84\x02\x02\xd5\x6c\x4f\xbf\x42\x6b\x99\x59\xe2\x52\x3b\xaf\x8c\x3d\x87\x2f\xe7\x3f\x3f\x54\xad\x2e\x83\x34\x1a\x45\x51\x49\x5f\x17\xa5\x69\xac\x12\x41\x14\xc7\x4a\x16\x81\xb9\x0f\x11\x76\x0b\xc0\x8b\x80\xb2\xe1\x58\x76\x7a\xc3\x34\x57\x52\x0b\x50\x63\xcb\x55\x54\x65\x85\x7d\x94\x5a\x1d\xf0\xd4\xd9\x56\xa0\xe2\x88\x0d\x0e\x51\x04\x9c\x08\xad\xd3\x78\x8e\xff\x84\xe6\xe3\x89\x68\xdd\x6f\x0f\x78\x05\xa1\x9c\xfc\xe5\xfe\xc5\xdf\x5e\x4e\x74\x72\x69\x74\x60\x52\x7b\x50\x3a\x62\xa9\x02\x6d\x40\x5d\x6f\xba\x06\x8f\xe8\xe1\x67\xd0\x36\xbb\x45\xfa\xb0\xb8\x59\x4b\x25\x9d\x0f\xc6\x3e\xa4\x98\x49\x41\x7c\xe9\xa4\x0d\x45\xf8\xb4\xe2\xde\x2c\x2f\x3f\x4a\xbc\xde\x08\xf5\xb5\x50\x6a\x5c\xcb\x3f\xf6\x97\xc0\x85\x66\xcd\xdd\xa9\xb7\x8f\x49\x7d\x49\x09\x5a\xa2\x0b\x0a\x5a\x81\xde\x7a\x19\xa0\x0c\x64\x99\x9c\x0a\x6f\x6b\x2e\x4e\x6b\xdd\x2a\xb5\x22\xa0\x1c\xa4\xf7\x90\x49\xdc\x5c\x0d\x12\xfc\x9d\xf9\x1a\xd1\x86\x2f\x5f\xf7\xd8\x7e\xc0\xdd\x14\x68\xbe\x26\x09\x7a\x76\xcc\x5a\xe1\x10\x4d\x03\x33\x39\x10\x1d\xd3\xf2\x5e\x9e\x42\x2c\x60\x48\x96\x80\xd6\xc9\x6e\x61\x3d\xd6\x4f\x0a\x9b\x89\x06\x84\x91\xb4\xc3\x48\x64\x9c\x63\x6c\xf4\x4e\x1c\xcf\x38\x2e\xd2\xf9\xb9\x44\x95\x89\x4a\xfa\x30\xf0\x66\x4c\xdc\x64\x60\x63\x4e\xf3\x03\xba\xcc\x73\x22\xdd\xab\xb9\x44\x9f\x89\xbe\x36\x67\xf8\xc0\x42\x1b\x27\xfe\x0e\x00\x00\xff\xff\x60\x27\x75\x4b\x4b\x06\x00\x00")

func _assetsFish_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_comp,
		"_assets/fish_comp",
	)
}

func _assetsFish_comp() (*asset, error) {
	bytes, err := _assetsFish_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_comp", size: 1611, mode: os.FileMode(420), modTime: time.Unix(1451813280, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsFish_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x28\x4c\xcb\xb4\xe6\x52\x50\x48\xcd\x2b\x03\x31\x15\x54\x12\x8b\xd2\xcb\x40\x02\xc5\xe5\x99\x25\xc9\x19\x0a\x2a\xc5\x25\x89\x25\xa5\xc5\x20\x11\x05\x85\xe4\xc4\xe2\x54\x05\x75\x23\x75\x6b\x85\xe4\x14\x05\x0d\x98\x16\xdd\x1c\x88\xae\x68\xc3\x58\x4d\x64\x75\x5a\x40\x75\x45\xa9\x25\xa5\x45\x79\xc8\xa6\xa4\xe6\xa5\x58\x73\x01\x09\x2e\x40\x00\x00\x00\xff\xff\x09\x92\xc1\xef\x82\x00\x00\x00")

func _assetsFish_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsFish_wrapper,
		"_assets/fish_wrapper",
	)
}

func _assetsFish_wrapper() (*asset, error) {
	bytes, err := _assetsFish_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/fish_wrapper", size: 130, mode: os.FileMode(420), modTime: time.Unix(1451615710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsSh_wrapper = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\xcb\x41\x0a\x02\x20\x10\x85\xe1\xbd\xa7\x78\xc8\x2c\x1c\xa1\x45\x6d\x25\x3a\x8b\x8c\x13\x08\xa2\xa4\xd5\x26\xba\x7b\x93\xd1\xf2\x7b\x8f\xff\x76\xad\x81\xf1\x72\x80\xf6\x27\x4c\xa0\x68\x68\x43\x72\x83\x8c\xa2\x67\xba\x98\x25\x2f\x05\x7d\x8d\xda\xcd\xc0\x89\x21\x05\x9e\xc2\xbf\x3b\x34\xd0\x91\x7d\x4a\xfb\x8e\x8c\xa9\xf7\xc7\xec\xbf\x6a\xaf\xba\xb2\xb8\xb7\xfb\x04\x00\x00\xff\xff\x5e\x78\xf3\x7a\x73\x00\x00\x00")

func _assetsSh_wrapperBytes() ([]byte, error) {
	return bindataRead(
		__assetsSh_wrapper,
		"_assets/sh_wrapper",
	)
}

func _assetsSh_wrapper() (*asset, error) {
	bytes, err := _assetsSh_wrapperBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/sh_wrapper", size: 115, mode: os.FileMode(420), modTime: time.Unix(1451615710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __assetsZsh_comp = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x94\xdb\x6a\xdc\x30\x10\x86\xef\xfd\x14\xc3\x26\xa0\xdd\x14\x11\x9a\xde\x6d\x49\xe9\x3b\xf4\xd2\x2d\x46\xb1\x66\x63\x83\x2c\xbb\x92\x36\x4b\x7a\x78\xf7\x8e\x0e\xb6\x65\xe3\x90\x85\xde\xec\x41\xf3\xcf\x37\x07\xcd\xe8\xa6\xee\xbb\x41\xe2\x09\x7e\x9e\xda\xa2\xb8\x01\xd5\x5a\x67\x41\x28\x05\x4e\x98\x67\x74\xa0\x45\x87\xb6\xa8\xc8\x5c\xc5\x13\xbb\x3f\xc0\xef\x02\x40\xf5\xb5\x18\x55\xd3\x5f\x2e\xd2\x89\xa5\x23\xf2\x01\xae\xe0\xe1\xcb\xbd\xc4\x97\x7b\x7d\x26\xe8\x1f\xb8\x34\xad\x42\x30\x28\x64\x52\x7e\x06\xd9\x93\x18\x46\xc7\x0f\x8f\xb7\x13\x54\xf6\x1a\xe9\xab\x92\x68\x6b\xd3\x3e\x21\x70\xe7\xa9\x3c\x49\x81\xc5\x1f\x6c\x0a\xfa\xd7\xd7\xa0\xf1\x32\x66\xdf\x1b\x38\x51\xbc\x98\x3f\x9d\xa7\x1a\x52\x09\xd5\xf3\x59\x18\x09\xbb\xbb\x1d\xb0\xcc\xc9\x97\xcc\xbc\xd9\xbb\x26\x26\xb5\xa9\x13\x5a\xc2\x89\x88\x28\xea\x06\x44\xed\xda\x5e\x47\x70\xdd\x49\x4a\x51\xa1\xc3\x11\x4c\xa0\x73\x87\x9a\x52\xe4\x16\x8e\xf0\x3d\x14\x08\xc0\xee\x8e\x70\xcc\x7b\xc9\x88\x3e\x21\x0c\xfa\xc8\xef\x21\x1e\xd6\x88\xd9\xf4\x69\x34\xcd\x95\x7a\x6b\x16\xc2\x5f\xef\xfb\x01\x36\x22\x64\x0c\x21\xe5\xd5\x39\x2e\x13\xc9\xd3\x0c\xbd\x5d\x94\xdf\xf5\x2f\xff\x5d\xfc\x44\x9d\xb1\xb6\x41\xa5\xae\xe6\x06\x75\x15\x26\x60\xa3\xaf\x7e\x0a\x07\x57\xb9\xd7\x01\xe7\x20\xb3\xcb\x62\x33\x68\x15\x82\xc5\x3e\xee\x9f\x84\x6d\x68\x0e\xe9\xe3\x97\x6d\x0e\x8b\x81\x66\x41\xc3\x92\x74\x66\xce\x81\xd6\x50\x7f\x46\x4c\xbf\xb7\x70\x31\x62\x18\xd0\xac\x91\xc1\x39\x08\x59\x94\x4f\x5c\x4d\x0b\xf5\x46\x2f\xd8\x47\xaa\x92\xc5\x69\xef\x44\xab\x41\xb6\x76\x10\xae\x6e\xd0\x04\xdf\x0d\xb7\x6f\xab\x2e\x72\x59\xc6\x35\x18\xf7\xf1\xc7\x71\x1a\xf8\x79\x47\xb2\xc6\x72\x51\xd2\x34\x25\xf5\x4a\x4c\x86\x5c\xd9\x95\x7e\x3e\xb6\xa5\xde\x92\x6b\x4d\x19\x57\x69\x5b\x1d\x6d\xb9\x5e\x95\x7e\x2f\xde\x48\xda\x9b\x72\xb1\x2d\x6d\xd3\x5f\xc0\x9e\xe9\x41\x30\xaf\x99\xd8\xf7\x36\x17\xf2\x70\xa7\xe5\x60\x5a\xed\x20\xde\xc9\x0a\x9d\xee\x7e\x72\xd9\xf3\xc3\xc6\xfb\x10\xba\x0f\xbb\xdb\xaf\xbb\xe2\x5f\x00\x00\x00\xff\xff\xef\xca\x81\xe5\xae\x05\x00\x00")

func _assetsZsh_compBytes() ([]byte, error) {
	return bindataRead(
		__assetsZsh_comp,
		"_assets/zsh_comp",
	)
}

func _assetsZsh_comp() (*asset, error) {
	bytes, err := _assetsZsh_compBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_assets/zsh_comp", size: 1454, mode: os.FileMode(420), modTime: time.Unix(1451813347, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_assets/.fish_comp.swp": _assetsFish_compSwp,
	"_assets/bash_comp": _assetsBash_comp,
	"_assets/fish_comp": _assetsFish_comp,
	"_assets/fish_wrapper": _assetsFish_wrapper,
	"_assets/sh_wrapper": _assetsSh_wrapper,
	"_assets/zsh_comp": _assetsZsh_comp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"_assets": &bintree{nil, map[string]*bintree{
		".fish_comp.swp": &bintree{_assetsFish_compSwp, map[string]*bintree{}},
		"bash_comp": &bintree{_assetsBash_comp, map[string]*bintree{}},
		"fish_comp": &bintree{_assetsFish_comp, map[string]*bintree{}},
		"fish_wrapper": &bintree{_assetsFish_wrapper, map[string]*bintree{}},
		"sh_wrapper": &bintree{_assetsSh_wrapper, map[string]*bintree{}},
		"zsh_comp": &bintree{_assetsZsh_comp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

